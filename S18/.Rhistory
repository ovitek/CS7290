out[[i]] <- length(l[[i]])
out
unlist(out)
unlist(lapply(l, length))
mtcars
unlist(lapply(mtcars, class))
mtcars[] <- lapply(mtcars, function(x) x / mean(x))
mtcars
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
fc <- factor(c("a", "a", "b", "c"))
fc
class(fc)
typeof(fc)
attributes(fc)
df <- data.frame(x=1:3, y=4:6)
class(df)
typeof(df)
attributes(df)
class(df) <- "list"
df
class(df) <- "data.frame"
df
df
df
od <- ordered(c("a", "a", "b", "c"))
od
class(od)
plot
print
print.default
plot.default
x.y <- 1
as.data.frame.matrix
as.data.frame.data.frame
print
summary
methods("print")
print.ts
print.ts
?ts
stats:::print.ts
stats:::print.ts
print.ts
c(TRUE, FALSE, FALSE) | c(TRUE, TRUE, FALSE)
c(TRUE, FALSE, FALSE) || c(TRUE, TRUE, FALSE)
dim
dimnames
?`mostattributes<-`
S3ProteomicsExperiment <- function(protein, feature, run, intensity, label , ..., is_log_trans = FALSE)
{
dots <- list(...)
if ( length(dots) > 0 ) {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label, list(...))
} else {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label)
}
if ( !is.logical(is_log_trans) || length(is_log_trans) != 1 )
stop("is_log_trans must be a length-1 logical")
attr(object, "is_log_trans") <- is_log_trans
class(object) <- c("S3ProteomicsExperiment", "data.frame")
object
}
library(tidyverse)
load("../data/adv-R-twin.RData")
twin_dia2 <- twin_dia %>%
rename(heavy = intensity_h, light = intensity_l) %>%
gather(label, intensity, heavy, light)
head(twin_dia2)
twin_dia3 <- S3ProteomicsExperiment(protein=twin_dia2$protein,
feature=twin_dia2$feature,
run=twin_dia2$run,
intensity=twin_dia2$intensity,
label=twin_dia2$label)
head(twin_dia3)
head(twin_dia3)
normalize <- function(object, ...) UseMethod("normalize")
normalize.S3ProteomicsExperiment <- function(object, by, ...) {
if ( !attr(object, "is_log_trans") ) {
object$intensity <- log2(object$intensity)
attr(object, "is_log_trans") <- TRUE
}
std <- object$label == by
medians <- tapply(object$intensity[std], object$run[std],
median, na.rm=TRUE)
gbl_median <- median(medians, na.rm=TRUE)
object$intensity <- object$intensity - medians[object$run] + gbl_median
object
}
summary
summary.S3ProteomicsExperiment <- function(object, ...) {
if ( attr(object, "is_log_trans") )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
}
plot.S3ProteomicsExperiment <- function(x, y, ...) {
if ( attr(x, "is_log_trans") ) {
ylab <- "log2(intensity)"
} else {
ylab <- "intensity"
}
boxplot(x$intensity ~ x$run, xlab="run", ylab=ylab)
}
twin_dia3 <- normalize(twin_dia3, by="heavy")
head(summary(twin_dia3)[,,"light"])
head(twin_dia3)
summary.S3ProteomicsExperiment <- function(object, ...) {
if ( attr(object, "is_log_trans") )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
}
summary(twin_dia3)[,,"light"]
summary(twin_dia3)
class(object$intensity)
class(twin_dia$intensity)
class(twin_dia3$intensity)
twin_dia3$intensity
`+`
`+`
`+`
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
# investigate factors
fc <- factor(c("a", "a", "b", "c"))
class(fc)
typeof(fc) # built on top of 'integer' base type
attributes(fc) # has 'class' and 'levels' attributes
# investigate data.frames
df <- data.frame(x=1:3, y=4:6)
class(df)
typeof(df) # built on top of 'list' base type
attributes(df) # has 'class', 'names', and 'row.names' attributes
class(df) <- "list"
df
class(df) <- "data.frame"
df
od <- ordered(c("a", "a", "b", "c"))
class(od) # class 'ordered' inherits from 'factor'
print # its body uses 'UseMethod', so it's a generic function
head(methods("print")) # there are a lot of 'print' methods
plot # plot is also a generic function with UseMethod("plot")
head(methods("plot")) # 'plot' has a lot of methods too
summary # summary is a generic function with UseMethod("summary")
head(methods("summary")) # 'summary' also has many methods
S3ProteomicsExperiment <- function(protein, feature, run, intensity, label , ..., is_log_trans = FALSE)
{
dots <- list(...)
if ( length(dots) > 0 ) {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label, list(...))
} else {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label)
}
if ( !is.logical(is_log_trans) || length(is_log_trans) != 1 )
stop("is_log_trans must be a length-1 logical")
attr(object, "is_log_trans") <- is_log_trans
class(object) <- c("S3ProteomicsExperiment", "data.frame")
object
}
library(tidyverse)
load("../data/adv-R-twin.RData")
twin_dia2 <- twin_dia %>%
rename(heavy = intensity_h, light = intensity_l) %>%
gather(label, intensity, heavy, light)
twin_dia3 <- S3ProteomicsExperiment(protein=twin_dia2$protein,
feature=twin_dia2$feature,
run=twin_dia2$run,
intensity=twin_dia2$intensity,
label=twin_dia2$label)
head(twin_dia3)
twin_dia3 <- normalize(twin_dia3, by="heavy")
normalize <- function(object, ...) UseMethod("normalize")
normalize.S3ProteomicsExperiment <- function(object, by, ...) {
if ( !attr(object, "is_log_trans") ) {
object$intensity <- log2(object$intensity)
attr(object, "is_log_trans") <- TRUE
}
std <- object$label == by
medians <- tapply(object$intensity[std], object$run[std],
median, na.rm=TRUE)
gbl_median <- median(medians, na.rm=TRUE)
object$intensity <- object$intensity - medians[object$run] + gbl_median
object
}
summary.S3ProteomicsExperiment <- function(object, ...) {
if ( attr(object, "is_log_trans") )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
}
plot.S3ProteomicsExperiment <- function(x, y, ...) {
if ( attr(x, "is_log_trans") ) {
ylab <- "log2(intensity)"
} else {
ylab <- "intensity"
}
boxplot(x$intensity ~ x$run, xlab="run", ylab=ylab)
}
twin_dia3 <- normalize(twin_dia3, by="heavy")
head(summary(twin_dia3)[,,"light"])
plot(twin_dia3)
plot(1:10, 1:10)
base:::`+`
`+` <- function(e1, e2) UseMethod("+")
`+.default` <- base:::`+`
`+.character` <- function(e1, e2) paste(e1, e2)
1+1
"a" + "b"
base:::`+`
`+`
library(dplyr)
library(tidyverse)
library(plyr)
arrange
dplyr::arrange
plyr::arrange
plot
`+.character`(1,2)
summary.data.frame(twin_dia3)
getClass("data.frame")
setClass("S4ProteomicsExperiment",
contains="data.frame",
slots=c(is_log_trans = "logical",
title = "character"),
validity=function(object) {
reqCols <- c("protein", "feature",
"run", "intensity", "label")
msngCols <- !reqCols %in% object@names
if ( any(msngCols) ) {
msngNames <- paste0(reqCols[msngCols], collapse=" ")
paste0("missing columns: ", msngNames)
} else {
TRUE
}
})
4ProteomicsExperiment <- function(protein, feature, run, intensity, label, ..., title="My First Proteomics Experiment",
S4ProteomicsExperiment <- function(protein, feature, run, intensity, label, ..., title="My First Proteomics Experiment",
is_log_trans = FALSE)
{
dots <- list(...)
if ( length(dots) > 0 ) {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label, list(...))
} else {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label)
}
new("S4ProteomicsExperiment", object,
title=title, is_log_trans=is_log_trans)
}
twin_dia4 <- S4ProteomicsExperiment(protein=twin_dia2$protein,
feature=twin_dia2$feature,
run=twin_dia2$run,
intensity=twin_dia2$intensity,
label=twin_dia2$label,
title="Twin DIA Experiment")
head(twin_dia4)
head(twin_dia4)
isGeneric("normalize")
isGeneric("summary")
isGeneric("plot")
setGeneric("normalize")
setGeneric("summary")
setGeneric("plot")
getGeneric("normalize")
getGeneric("summary")
getGeneric("plot")
showMethods("normalize")
selectMethod("normalize", "ANY")
setMethod("normalize", "S4ProteomicsExperiment",
function(object, by, ...) {
if ( !object@is_log_trans ) {
object$intensity <- log2(object$intensity)
object@is_log_trans <- TRUE
}
std <- object$label == by
medians <- tapply(object$intensity[std], object$run[std],
median, na.rm=TRUE)
gbl_median <- median(medians, na.rm=TRUE)
object$intensity <- object$intensity - medians[object$run] + gbl_median
if ( validObject(object) )
object
})
setMethod("summary", "S4ProteomicsExperiment",
function(object, ...) {
if ( object@is_log_trans )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
})
setMethod("plot", "S4ProteomicsExperiment",
function(x, y, ...) {
if ( x@is_log_trans ) {
ylab <- "log2(intensity)"
} else {
ylab <- "intensity"
}
boxplot(x$intensity ~ x$run,
xlab="run", ylab=ylab,
title=x@title)
})
twin_dia4 <- normalize(twin_dia4, by="heavy")
head(summary(twin_dia4)[,,"light"])
plot(twin_dia4)
methods(class="S3ProteomicsExperiment")
methods(class=class(twin_dia3))
warnings()
methods(class=class(twin_dia3))
methods(class=class(twin_dia3)[1])
class(twin_dia3)
methods(class=class(twin_dia3)[1])
methods(class=class(twin_dia4))
object.method()
method(object)
?ReferenceClasses
object$method()
e <- new.env()
e
e$x <- 1
foo <- function(e1) e1$x <- 2
e$x
foo(e)
e$x
library(gplots)
library(limma)
library(DESeq2)
library(marray)
library(genefilter)
library(tidyverse)
library(dslabs)
ds_theme_set()
install.packages("Dslabs")
install.packages("dslabs")
library(tidyverse)
library(dslabs)
ds_theme_set()
N <- 100
Sigma <- matrix(c(1,0.75,0.75, 1), 2, 2)*1.5
means <- list(c(11,3), c(9,5), c(7,7), c(5,9), c(3,11))
dat <- lapply(means, function(mu)
MASS::mvrnorm(N, mu, Sigma))
dat <- tbl_df(Reduce(rbind, dat)) %>%
mutate(Z = as.character(rep(seq_along(means), each = N)))
names(dat) <- c("X", "Y", "Z")
## First plot
dat %>% ggplot(aes(X,Y)) + geom_point(alpha = .5) +
ggtitle(paste("correlation = ", round(cor(dat$X, dat$Y), 2)))
means <- tbl_df(Reduce(rbind, means)) %>% setNames(c("x","y")) %>%
mutate(z = as.character(seq_along(means)))
corrs <- dat %>% group_by(Z) %>% summarize(cor = cor(X,Y)) %>% .$cor
p <- dat %>% ggplot(aes(X, Y, color = Z)) +
geom_point(show.legend = FALSE, alpha = 0.5) +
ggtitle(paste("correlations =",  paste(signif(corrs,2), collapse=" ")))
p
## third plot
p + annotate("text", x = means$x, y = means$y,
label = paste("Z=", means$z), cex = 5)
v <- c(0.001, 0.1, 10)
for i in c(1:3) {
print(v[i]/v)
}
v <- c(0.001, 0.1, 10)
for (i in 1:3) {
print(v[i]/v)
}
v <- c(0.001, 0.1, 10)
for (i in 1:3) {
print(v[i]/v[3:1])
}
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
dimnames(a)[[1]] <- v[3:1]
for (i in 1:3) {
a[,i] <- print(v[i]/v[3:1])
}
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
dimnames(a)[[1]] <- v[3:1]
for (i in 1:3) {
a[,i] <- v[i]/v[3:1]
}
a
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[1]] <- v[3:1]
dimnames(a)[[2]] <- v
for (i in 1:3) {
a[,i] <- v[i]/(v[i]+v[3:1])
}
a
18+18
library(faraway)
data(orings)
install.packages("Faraway")
library(faraway)
data(orings)
library(Faraway)
install.packages("faraway")
library(faraway)
data(orings)
plot(damage/6 ~ temp, orings, xlim=c(25,85),ylim=c(0,1),
xlab="Temperature",ylab="Proportion of damage", pch=16)
# ----------Fit (specify 2 responses: # of 1s and # of 0s)-------------
fit <- glm(cbind(damage, 6-damage) ~ temp, family=binomial, data=orings)
summary(fit)
newOrings <- data.frame(temp=seq(from=10, to=100, length=10))
newOrings.predict <- predict(fit, newdata=newOrings, se.fit=T, type="response")
lines(newOrings$temp, newOrings.predict$fit)
?step
setwd("/Users/olgavitek/Documents/GitHub/CS7290/S18")
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
install.packages("dslabs")
library(dslabs)
ls()
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
