feature=twin_dia2$feature,
run=twin_dia2$run,
intensity=twin_dia2$intensity,
label=twin_dia2$label)
head(twin_dia3)
twin_dia3 <- normalize(twin_dia3, by="heavy")
normalize <- function(object, ...) UseMethod("normalize")
normalize.S3ProteomicsExperiment <- function(object, by, ...) {
if ( !attr(object, "is_log_trans") ) {
object$intensity <- log2(object$intensity)
attr(object, "is_log_trans") <- TRUE
}
std <- object$label == by
medians <- tapply(object$intensity[std], object$run[std],
median, na.rm=TRUE)
gbl_median <- median(medians, na.rm=TRUE)
object$intensity <- object$intensity - medians[object$run] + gbl_median
object
}
summary.S3ProteomicsExperiment <- function(object, ...) {
if ( attr(object, "is_log_trans") )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
}
plot.S3ProteomicsExperiment <- function(x, y, ...) {
if ( attr(x, "is_log_trans") ) {
ylab <- "log2(intensity)"
} else {
ylab <- "intensity"
}
boxplot(x$intensity ~ x$run, xlab="run", ylab=ylab)
}
twin_dia3 <- normalize(twin_dia3, by="heavy")
head(summary(twin_dia3)[,,"light"])
plot(twin_dia3)
plot(1:10, 1:10)
base:::`+`
`+` <- function(e1, e2) UseMethod("+")
`+.default` <- base:::`+`
`+.character` <- function(e1, e2) paste(e1, e2)
1+1
"a" + "b"
base:::`+`
`+`
library(dplyr)
library(tidyverse)
library(plyr)
arrange
dplyr::arrange
plyr::arrange
plot
`+.character`(1,2)
summary.data.frame(twin_dia3)
getClass("data.frame")
setClass("S4ProteomicsExperiment",
contains="data.frame",
slots=c(is_log_trans = "logical",
title = "character"),
validity=function(object) {
reqCols <- c("protein", "feature",
"run", "intensity", "label")
msngCols <- !reqCols %in% object@names
if ( any(msngCols) ) {
msngNames <- paste0(reqCols[msngCols], collapse=" ")
paste0("missing columns: ", msngNames)
} else {
TRUE
}
})
4ProteomicsExperiment <- function(protein, feature, run, intensity, label, ..., title="My First Proteomics Experiment",
S4ProteomicsExperiment <- function(protein, feature, run, intensity, label, ..., title="My First Proteomics Experiment",
is_log_trans = FALSE)
{
dots <- list(...)
if ( length(dots) > 0 ) {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label, list(...))
} else {
object <- data.frame(protein=protein, feature=feature,
run=run, intensity=intensity, label=label)
}
new("S4ProteomicsExperiment", object,
title=title, is_log_trans=is_log_trans)
}
twin_dia4 <- S4ProteomicsExperiment(protein=twin_dia2$protein,
feature=twin_dia2$feature,
run=twin_dia2$run,
intensity=twin_dia2$intensity,
label=twin_dia2$label,
title="Twin DIA Experiment")
head(twin_dia4)
head(twin_dia4)
isGeneric("normalize")
isGeneric("summary")
isGeneric("plot")
setGeneric("normalize")
setGeneric("summary")
setGeneric("plot")
getGeneric("normalize")
getGeneric("summary")
getGeneric("plot")
showMethods("normalize")
selectMethod("normalize", "ANY")
setMethod("normalize", "S4ProteomicsExperiment",
function(object, by, ...) {
if ( !object@is_log_trans ) {
object$intensity <- log2(object$intensity)
object@is_log_trans <- TRUE
}
std <- object$label == by
medians <- tapply(object$intensity[std], object$run[std],
median, na.rm=TRUE)
gbl_median <- median(medians, na.rm=TRUE)
object$intensity <- object$intensity - medians[object$run] + gbl_median
if ( validObject(object) )
object
})
setMethod("summary", "S4ProteomicsExperiment",
function(object, ...) {
if ( object@is_log_trans )
object$intensity <- 2^object$intensity
tapply(object$intensity,
list(run=object$run,
protein=object$protein,
label=object$label),
function(x) log2(sum(x, na.rm=TRUE)))
})
setMethod("plot", "S4ProteomicsExperiment",
function(x, y, ...) {
if ( x@is_log_trans ) {
ylab <- "log2(intensity)"
} else {
ylab <- "intensity"
}
boxplot(x$intensity ~ x$run,
xlab="run", ylab=ylab,
title=x@title)
})
twin_dia4 <- normalize(twin_dia4, by="heavy")
head(summary(twin_dia4)[,,"light"])
plot(twin_dia4)
methods(class="S3ProteomicsExperiment")
methods(class=class(twin_dia3))
warnings()
methods(class=class(twin_dia3))
methods(class=class(twin_dia3)[1])
class(twin_dia3)
methods(class=class(twin_dia3)[1])
methods(class=class(twin_dia4))
object.method()
method(object)
?ReferenceClasses
object$method()
e <- new.env()
e
e$x <- 1
foo <- function(e1) e1$x <- 2
e$x
foo(e)
e$x
library(gplots)
library(limma)
library(DESeq2)
library(marray)
library(genefilter)
library(tidyverse)
library(dslabs)
ds_theme_set()
install.packages("Dslabs")
install.packages("dslabs")
library(tidyverse)
library(dslabs)
ds_theme_set()
N <- 100
Sigma <- matrix(c(1,0.75,0.75, 1), 2, 2)*1.5
means <- list(c(11,3), c(9,5), c(7,7), c(5,9), c(3,11))
dat <- lapply(means, function(mu)
MASS::mvrnorm(N, mu, Sigma))
dat <- tbl_df(Reduce(rbind, dat)) %>%
mutate(Z = as.character(rep(seq_along(means), each = N)))
names(dat) <- c("X", "Y", "Z")
## First plot
dat %>% ggplot(aes(X,Y)) + geom_point(alpha = .5) +
ggtitle(paste("correlation = ", round(cor(dat$X, dat$Y), 2)))
means <- tbl_df(Reduce(rbind, means)) %>% setNames(c("x","y")) %>%
mutate(z = as.character(seq_along(means)))
corrs <- dat %>% group_by(Z) %>% summarize(cor = cor(X,Y)) %>% .$cor
p <- dat %>% ggplot(aes(X, Y, color = Z)) +
geom_point(show.legend = FALSE, alpha = 0.5) +
ggtitle(paste("correlations =",  paste(signif(corrs,2), collapse=" ")))
p
## third plot
p + annotate("text", x = means$x, y = means$y,
label = paste("Z=", means$z), cex = 5)
v <- c(0.001, 0.1, 10)
for i in c(1:3) {
print(v[i]/v)
}
v <- c(0.001, 0.1, 10)
for (i in 1:3) {
print(v[i]/v)
}
v <- c(0.001, 0.1, 10)
for (i in 1:3) {
print(v[i]/v[3:1])
}
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
dimnames(a)[[1]] <- v[3:1]
for (i in 1:3) {
a[,i] <- print(v[i]/v[3:1])
}
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[2]] <- v
dimnames(a)[[1]] <- v[3:1]
for (i in 1:3) {
a[,i] <- v[i]/v[3:1]
}
a
v <- c(0.001, 0.1, 10)
a <- matrix(nrow=3, ncol=3)
dimnames(a)[[1]] <- v[3:1]
dimnames(a)[[2]] <- v
for (i in 1:3) {
a[,i] <- v[i]/(v[i]+v[3:1])
}
a
18+18
library(faraway)
data(orings)
install.packages("Faraway")
library(faraway)
data(orings)
library(Faraway)
install.packages("faraway")
library(faraway)
data(orings)
plot(damage/6 ~ temp, orings, xlim=c(25,85),ylim=c(0,1),
xlab="Temperature",ylab="Proportion of damage", pch=16)
# ----------Fit (specify 2 responses: # of 1s and # of 0s)-------------
fit <- glm(cbind(damage, 6-damage) ~ temp, family=binomial, data=orings)
summary(fit)
newOrings <- data.frame(temp=seq(from=10, to=100, length=10))
newOrings.predict <- predict(fit, newdata=newOrings, se.fit=T, type="response")
lines(newOrings$temp, newOrings.predict$fit)
?step
knitr::opts_chunk$set(echo = TRUE)
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard Error")
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard Error", type="l")
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard error of Xbar", type="l")
par(mfrow=c(1,3))
for (n in c(25,100,1000)){
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/n)
plot(p,se,xlab = "p", ylab = "Standard Error of Xbar", main = paste("N=", n), type="l", ylim=c(0,0.1))
}
mean(errors1)
errors1 <- replicate(10000, take_sample(0.45,100) - 0.45 )
take_sample <- function(p,N){
x=rbinom(N,1, p)
return(mean(x))
}
errors1 <- replicate(10000, take_sample(0.45,100) - 0.45 )
errors2 <- replicate(25, take_sample(0.45,100) - 0.45 )
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.1,0.1), breaks = 10)
hist(errors2, xlim=c(-0.1,0.1), breaks = 10)
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.2,0.2), breaks = 10)
hist(errors2, xlim=c(-0.2,0.2), breaks = 10)
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = 10)
hist(errors2, xlim=c(-0.3,0.3), breaks = 10)
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=10))
hist(errors2, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=10))
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=50))
hist(errors2, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=50))
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=20))
hist(errors2, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=20))
mean(errors1)
mean(errors2)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=100))
hist(errors2, xlim=c(-0.3,0.3), breaks = seq(from=-0.3, to=0.3, length=100))
mean(errors)
errors <- replicate(10000, take_sample(0.45,100) - 0.45 )
mean(errors)
par(mfrow=c(1,2))
hist(errors1, xlim=c(-0.3,0.3), breaks = 10)
mean(errors)
par(mfrow=c(1,2))
hist(errors, xlim=c(-0.3,0.3), breaks = 10, main=paste("Mean error =", mean(errors)))
mean(errors)
par(mfrow=c(1,2))
hist(errors, xlim=c(-0.3,0.3), breaks = 10,
main=paste("Mean error =", round(mean(errors), digits=5)))
mean(abs(errors))
knitr::opts_chunk$set(echo = TRUE)
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard error of Xbar", type="l", ylim=c(0,0.1))
par(mfrow=c(1,3))
for (N in c(25,100,1000)){
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/N)
plot(p,se,xlab = "p", ylab = "Standard Error of Xbar",
main = paste("N=", N), type="l", ylim=c(0,0.1))
}
take_sample <- function(p,N){
x=rbinom(N,1, p)
return(mean(x))
}
errors <- replicate(10000, take_sample(0.45,100) - 0.45 )
mean(errors)
par(mfrow=c(1,2))
hist(errors, xlim=c(-0.3,0.3), breaks = 10,
main=paste("Mean error =", round(mean(errors), digits=5)))
set.seed(1)
X<-take_sample(0.45,100)
sqrt(mean(X)*(1-mean(X))/100)
sqrt(0.45*(1-0.45)/100)
N <- seq(100, 5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l", ylim=c(0,0.1))
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l", ylim=c(0,0.1))
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
hline=0.01*p
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
hline=0.01
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
hline=0.01
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
hline(0.01)
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
abline(h=0.01)
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
abline(h=0.01, lty=3)
nrow(polls)*0.95
library(dplyr)
x_hat = polls$rawpoll_clinton/100
plot(p,se,xlab = "p", ylab = "Standard error of Xbar", type="l")
polls$rawpoll_clinton
knitr::opts_chunk$set(echo = TRUE)
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard error of Xbar", type="l", ylim=c(0,0.1))
par(mfrow=c(1,3))
for (N in c(25,100,1000)){
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/N)
plot(p,se,xlab = "p", ylab = "Standard Error of Xbar",
main = paste("N=", N), type="l", ylim=c(0,0.1))
}
take_sample <- function(p,N){
x=rbinom(N,1, p)
return(mean(x))
}
errors <- replicate(10000, take_sample(0.45,100) - 0.45 )
mean(errors)
par(mfrow=c(1,2))
hist(errors, xlim=c(-0.3,0.3), breaks = 10,
main=paste("Mean error =", round(mean(errors), digits=5)))
mean(abs(errors))
sqrt(mean(errors^2))
sqrt(0.45*(1-0.45)/100)
set.seed(1)
X<-take_sample(0.45,100)
sqrt(mean(X)*(1-mean(X))/100)
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
abline(h=0.01, lty=3)
qqnorm(errors)
1-pnorm(0.5, 0.45, sqrt(0.45*(1-0.45)/100))
2 * pnorm(0.51-0.01, 0.51, sqrt(0.51*(1-0.51)/100))
polls$rawpoll_clinton/100
library(dplyr)
x_hat = polls$rawpoll_clinton/100
ls()
knitr::opts_chunk$set(echo = TRUE)
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/25)
plot(p,se,xlab = "p", ylab = "Standard error of Xbar", type="l", ylim=c(0,0.1))
par(mfrow=c(1,3))
for (N in c(25,100,1000)){
p <- seq(0, 1, length = 100)
se = sqrt(p*(1-p)/N)
plot(p,se,xlab = "p", ylab = "Standard Error of Xbar",
main = paste("N=", N), type="l", ylim=c(0,0.1))
}
take_sample <- function(p,N){
x=rbinom(N,1, p)
return(mean(x))
}
errors <- replicate(10000, take_sample(0.45,100) - 0.45 )
mean(errors)
par(mfrow=c(1,2))
hist(errors, xlim=c(-0.3,0.3), breaks = 10,
main=paste("Mean error =", round(mean(errors), digits=5)))
mean(abs(errors))
sqrt(mean(errors^2))
sqrt(0.45*(1-0.45)/100)
set.seed(1)
X<-take_sample(0.45,100)
sqrt(mean(X)*(1-mean(X))/100)
p <- 0.5
N <- seq(from=100, to=5000, length = 100)
se = sqrt(p*(1-p)/N)
plot(N,se,xlab = "N", ylab = "Standard error of Xbar", type="l")
abline(h=0.01, lty=3)
qqnorm(errors)
1-pnorm(0.5, 0.45, sqrt(0.45*(1-0.45)/100))
2 * pnorm(0.51-0.01, 0.51, sqrt(0.51*(1-0.51)/100))
library(dslabs)
data("polls_us_election_2016")
library(tidyverse)
polls <- polls_us_election_2016 %>% filter(enddate >= "2016-10-31" & state == "U.S.")
N <- polls$samplesize[1]
X_hat <- polls$rawpoll_clinton[1]/100
se_hat <- sqrt(X_hat*(1-X_hat)/N)
interval<-c(qnorm(0.025,X_hat, se_hat), qnorm(0.975,X_hat, se_hat))
interval
library(dplyr)
x_hat = polls$rawpoll_clinton/100
se_hat = sqrt(x_hat*(1-x_hat)/polls$samplesize)
polls <- polls %>%
mutate(lower = qnorm(0.025,x_hat, sqrt(x_hat*(1-x_hat)/polls$samplesize)),
upper = qnorm(0.975,x_hat, sqrt(x_hat*(1-x_hat)/polls$samplesize)))
select(polls, pollster , enddate , rawpoll_clinton , lower , upper) %>%
head
polls <- polls %>%
mutate(hit = ifelse(0.482>=lower & 0.482<=upper,1,0))
mean(polls$hit)
ls()
dim(polls)
70*0.95
polls <- polls_us_election_2016 %>% filter(enddate >= "2016-10-31" & state == "U.S.")  %>%
mutate(d_hat = rawpoll_clinton/100 - rawpoll_trump/100)
N <- polls$samplesize[1]
D_hat <- polls$d_hat[1]
sed_hat <- sqrt(D_hat*(1-D_hat)/N)
interval<-c(qnorm(0.025,D_hat, sed_hat), qnorm(0.975,D_hat, sed_hat))
interval
polls <- polls %>%
mutate(lower = qnorm(0.025,polls$d_hat, 2*sqrt(x_hat*(1-x_hat)/polls$samplesize)),
upper = qnorm(0.975,polls$d_hat, 2*sqrt(x_hat*(1-x_hat)/polls$samplesize)))
polls <- polls %>%
mutate(hit = ifelse(0.021>=lower & 0.021<=upper,1,0))
mean(polls$hit)
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
source('~/Documents/GitHub/CS7290/S18/build_site.R')
